// Code generated by MockGen. DO NOT EDIT.
// Source: D:\GoLandProjects\orders-center\db\sqlc\querier.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "orders-center/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// BatchPendingTasks mocks base method.
func (m *MockQuerier) BatchPendingTasks(ctx context.Context, limit int32) ([]db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPendingTasks", ctx, limit)
	ret0, _ := ret[0].([]db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPendingTasks indicates an expected call of BatchPendingTasks.
func (mr *MockQuerierMockRecorder) BatchPendingTasks(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPendingTasks", reflect.TypeOf((*MockQuerier)(nil).BatchPendingTasks), ctx, limit)
}

// CreateHistory mocks base method.
func (m *MockQuerier) CreateHistory(ctx context.Context, arg db.CreateHistoryParams) (db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHistory", ctx, arg)
	ret0, _ := ret[0].(db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHistory indicates an expected call of CreateHistory.
func (mr *MockQuerierMockRecorder) CreateHistory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistory", reflect.TypeOf((*MockQuerier)(nil).CreateHistory), ctx, arg)
}

// CreateOrder mocks base method.
func (m *MockQuerier) CreateOrder(ctx context.Context, arg db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockQuerierMockRecorder) CreateOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockQuerier)(nil).CreateOrder), ctx, arg)
}

// CreateOrderItem mocks base method.
func (m *MockQuerier) CreateOrderItem(ctx context.Context, arg db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockQuerierMockRecorder) CreateOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockQuerier)(nil).CreateOrderItem), ctx, arg)
}

// CreateOutboxEvent mocks base method.
func (m *MockQuerier) CreateOutboxEvent(ctx context.Context, arg db.CreateOutboxEventParams) (db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutboxEvent", ctx, arg)
	ret0, _ := ret[0].(db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutboxEvent indicates an expected call of CreateOutboxEvent.
func (mr *MockQuerierMockRecorder) CreateOutboxEvent(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutboxEvent", reflect.TypeOf((*MockQuerier)(nil).CreateOutboxEvent), ctx, arg)
}

// CreatePayment mocks base method.
func (m *MockQuerier) CreatePayment(ctx context.Context, arg db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockQuerierMockRecorder) CreatePayment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockQuerier)(nil).CreatePayment), ctx, arg)
}

// DeleteHistory mocks base method.
func (m *MockQuerier) DeleteHistory(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistory indicates an expected call of DeleteHistory.
func (mr *MockQuerierMockRecorder) DeleteHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistory", reflect.TypeOf((*MockQuerier)(nil).DeleteHistory), ctx, id)
}

// DeleteOrder mocks base method.
func (m *MockQuerier) DeleteOrder(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockQuerierMockRecorder) DeleteOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockQuerier)(nil).DeleteOrder), ctx, id)
}

// DeleteOrderItem mocks base method.
func (m *MockQuerier) DeleteOrderItem(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockQuerierMockRecorder) DeleteOrderItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockQuerier)(nil).DeleteOrderItem), ctx, id)
}

// DeleteOutboxEvent mocks base method.
func (m *MockQuerier) DeleteOutboxEvent(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutboxEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutboxEvent indicates an expected call of DeleteOutboxEvent.
func (mr *MockQuerierMockRecorder) DeleteOutboxEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutboxEvent", reflect.TypeOf((*MockQuerier)(nil).DeleteOutboxEvent), ctx, id)
}

// DeletePayment mocks base method.
func (m *MockQuerier) DeletePayment(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockQuerierMockRecorder) DeletePayment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockQuerier)(nil).DeletePayment), ctx, id)
}

// FetchOnePendingForUpdate mocks base method.
func (m *MockQuerier) FetchOnePendingForUpdate(ctx context.Context) (db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOnePendingForUpdate", ctx)
	ret0, _ := ret[0].(db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOnePendingForUpdate indicates an expected call of FetchOnePendingForUpdate.
func (mr *MockQuerierMockRecorder) FetchOnePendingForUpdate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOnePendingForUpdate", reflect.TypeOf((*MockQuerier)(nil).FetchOnePendingForUpdate), ctx)
}

// FetchOnePendingForUpdateWithID mocks base method.
func (m *MockQuerier) FetchOnePendingForUpdateWithID(ctx context.Context, id pgtype.UUID) (db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOnePendingForUpdateWithID", ctx, id)
	ret0, _ := ret[0].(db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOnePendingForUpdateWithID indicates an expected call of FetchOnePendingForUpdateWithID.
func (mr *MockQuerierMockRecorder) FetchOnePendingForUpdateWithID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOnePendingForUpdateWithID", reflect.TypeOf((*MockQuerier)(nil).FetchOnePendingForUpdateWithID), ctx, id)
}

// GetHistoriesByOrderID mocks base method.
func (m *MockQuerier) GetHistoriesByOrderID(ctx context.Context, orderID pgtype.UUID) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoriesByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoriesByOrderID indicates an expected call of GetHistoriesByOrderID.
func (mr *MockQuerierMockRecorder) GetHistoriesByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoriesByOrderID", reflect.TypeOf((*MockQuerier)(nil).GetHistoriesByOrderID), ctx, orderID)
}

// GetHistory mocks base method.
func (m *MockQuerier) GetHistory(ctx context.Context, id int32) (db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, id)
	ret0, _ := ret[0].(db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockQuerierMockRecorder) GetHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockQuerier)(nil).GetHistory), ctx, id)
}

// GetOrder mocks base method.
func (m *MockQuerier) GetOrder(ctx context.Context, id pgtype.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockQuerierMockRecorder) GetOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockQuerier)(nil).GetOrder), ctx, id)
}

// GetOrderItem mocks base method.
func (m *MockQuerier) GetOrderItem(ctx context.Context, id int32) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItem", ctx, id)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem.
func (mr *MockQuerierMockRecorder) GetOrderItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockQuerier)(nil).GetOrderItem), ctx, id)
}

// GetOrderItemsByOrderID mocks base method.
func (m *MockQuerier) GetOrderItemsByOrderID(ctx context.Context, orderID pgtype.UUID) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderID indicates an expected call of GetOrderItemsByOrderID.
func (mr *MockQuerierMockRecorder) GetOrderItemsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderID", reflect.TypeOf((*MockQuerier)(nil).GetOrderItemsByOrderID), ctx, orderID)
}

// GetOutboxEvent mocks base method.
func (m *MockQuerier) GetOutboxEvent(ctx context.Context, id pgtype.UUID) (db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutboxEvent", ctx, id)
	ret0, _ := ret[0].(db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutboxEvent indicates an expected call of GetOutboxEvent.
func (mr *MockQuerierMockRecorder) GetOutboxEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutboxEvent", reflect.TypeOf((*MockQuerier)(nil).GetOutboxEvent), ctx, id)
}

// GetPayment mocks base method.
func (m *MockQuerier) GetPayment(ctx context.Context, id pgtype.UUID) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, id)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockQuerierMockRecorder) GetPayment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockQuerier)(nil).GetPayment), ctx, id)
}

// GetPaymentsByOrderID mocks base method.
func (m *MockQuerier) GetPaymentsByOrderID(ctx context.Context, orderID pgtype.UUID) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByOrderID indicates an expected call of GetPaymentsByOrderID.
func (mr *MockQuerierMockRecorder) GetPaymentsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByOrderID", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByOrderID), ctx, orderID)
}

// GetPendingOutboxEvents mocks base method.
func (m *MockQuerier) GetPendingOutboxEvents(ctx context.Context, limit int32) ([]db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingOutboxEvents", ctx, limit)
	ret0, _ := ret[0].([]db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingOutboxEvents indicates an expected call of GetPendingOutboxEvents.
func (mr *MockQuerierMockRecorder) GetPendingOutboxEvents(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingOutboxEvents", reflect.TypeOf((*MockQuerier)(nil).GetPendingOutboxEvents), ctx, limit)
}

// IncrementRetryCount mocks base method.
func (m *MockQuerier) IncrementRetryCount(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementRetryCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementRetryCount indicates an expected call of IncrementRetryCount.
func (mr *MockQuerierMockRecorder) IncrementRetryCount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRetryCount", reflect.TypeOf((*MockQuerier)(nil).IncrementRetryCount), ctx, id)
}

// UpdateHistory mocks base method.
func (m *MockQuerier) UpdateHistory(ctx context.Context, arg db.UpdateHistoryParams) (db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistory", ctx, arg)
	ret0, _ := ret[0].(db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHistory indicates an expected call of UpdateHistory.
func (mr *MockQuerierMockRecorder) UpdateHistory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistory", reflect.TypeOf((*MockQuerier)(nil).UpdateHistory), ctx, arg)
}

// UpdateOrder mocks base method.
func (m *MockQuerier) UpdateOrder(ctx context.Context, arg db.UpdateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockQuerierMockRecorder) UpdateOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockQuerier)(nil).UpdateOrder), ctx, arg)
}

// UpdateOrderItem mocks base method.
func (m *MockQuerier) UpdateOrderItem(ctx context.Context, arg db.UpdateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockQuerierMockRecorder) UpdateOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockQuerier)(nil).UpdateOrderItem), ctx, arg)
}

// UpdateOutboxEventStatus mocks base method.
func (m *MockQuerier) UpdateOutboxEventStatus(ctx context.Context, arg db.UpdateOutboxEventStatusParams) (db.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutboxEventStatus", ctx, arg)
	ret0, _ := ret[0].(db.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutboxEventStatus indicates an expected call of UpdateOutboxEventStatus.
func (mr *MockQuerierMockRecorder) UpdateOutboxEventStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutboxEventStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateOutboxEventStatus), ctx, arg)
}

// UpdatePayment mocks base method.
func (m *MockQuerier) UpdatePayment(ctx context.Context, arg db.UpdatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockQuerierMockRecorder) UpdatePayment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockQuerier)(nil).UpdatePayment), ctx, arg)
}
