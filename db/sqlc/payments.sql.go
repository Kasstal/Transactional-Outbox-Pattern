// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  order_id, type, sum, info, contract_number, external_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, order_id, type, sum, payed, info, contract_number, external_id, created_at, updated_at
`

type CreatePaymentParams struct {
	OrderID        uuid.UUID      `json:"order_id"`
	Type           PaymentType    `json:"type"`
	Sum            string         `json:"sum"`
	Info           sql.NullString `json:"info"`
	ContractNumber sql.NullString `json:"contract_number"`
	ExternalID     sql.NullString `json:"external_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.OrderID,
		arg.Type,
		arg.Sum,
		arg.Info,
		arg.ContractNumber,
		arg.ExternalID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Type,
		&i.Sum,
		&i.Payed,
		&i.Info,
		&i.ContractNumber,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, order_id, type, sum, payed, info, contract_number, external_id, created_at, updated_at FROM payments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Type,
		&i.Sum,
		&i.Payed,
		&i.Info,
		&i.ContractNumber,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentsByOrder = `-- name: GetPaymentsByOrder :many
SELECT id, order_id, type, sum, payed, info, contract_number, external_id, created_at, updated_at FROM payments
WHERE order_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPaymentsByOrder(ctx context.Context, orderID uuid.UUID) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Type,
			&i.Sum,
			&i.Payed,
			&i.Info,
			&i.ContractNumber,
			&i.ExternalID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET payed = $2, updated_at = now()
WHERE id = $1
RETURNING id, order_id, type, sum, payed, info, contract_number, external_id, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	ID    uuid.UUID    `json:"id"`
	Payed sql.NullBool `json:"payed"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.ID, arg.Payed)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Type,
		&i.Sum,
		&i.Payed,
		&i.Info,
		&i.ContractNumber,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
