// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id, type, status, city, subdivision, price,
    platform, general_id, order_number, executor
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
         ) RETURNING id, type, status, city, subdivision, price, platform, general_id, order_number, executor, created_at, updated_at
`

type CreateOrderParams struct {
	ID          pgtype.UUID    `json:"id"`
	Type        string         `json:"type"`
	Status      string         `json:"status"`
	City        string         `json:"city"`
	Subdivision pgtype.Text    `json:"subdivision"`
	Price       pgtype.Numeric `json:"price"`
	Platform    string         `json:"platform"`
	GeneralID   pgtype.UUID    `json:"general_id"`
	OrderNumber pgtype.Text    `json:"order_number"`
	Executor    pgtype.Text    `json:"executor"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.Type,
		arg.Status,
		arg.City,
		arg.Subdivision,
		arg.Price,
		arg.Platform,
		arg.GeneralID,
		arg.OrderNumber,
		arg.Executor,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.City,
		&i.Subdivision,
		&i.Price,
		&i.Platform,
		&i.GeneralID,
		&i.OrderNumber,
		&i.Executor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, type, status, city, subdivision, price, platform, general_id, order_number, executor, created_at, updated_at FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.City,
		&i.Subdivision,
		&i.Price,
		&i.Platform,
		&i.GeneralID,
		&i.OrderNumber,
		&i.Executor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
    type = $2,
    status = $3,
    city = $4,
    subdivision = $5,
    price = $6,
    platform = $7,
    general_id = $8,
    order_number = $9,
    executor = $10,
    updated_at = now()
WHERE id = $1
    RETURNING id, type, status, city, subdivision, price, platform, general_id, order_number, executor, created_at, updated_at
`

type UpdateOrderParams struct {
	ID          pgtype.UUID    `json:"id"`
	Type        string         `json:"type"`
	Status      string         `json:"status"`
	City        string         `json:"city"`
	Subdivision pgtype.Text    `json:"subdivision"`
	Price       pgtype.Numeric `json:"price"`
	Platform    string         `json:"platform"`
	GeneralID   pgtype.UUID    `json:"general_id"`
	OrderNumber pgtype.Text    `json:"order_number"`
	Executor    pgtype.Text    `json:"executor"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.Type,
		arg.Status,
		arg.City,
		arg.Subdivision,
		arg.Price,
		arg.Platform,
		arg.GeneralID,
		arg.OrderNumber,
		arg.Executor,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.City,
		&i.Subdivision,
		&i.Price,
		&i.Platform,
		&i.GeneralID,
		&i.OrderNumber,
		&i.Executor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
