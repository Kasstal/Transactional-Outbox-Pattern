// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: credit_data.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCreditData = `-- name: CreateCreditData :one
INSERT INTO credit_data (
  payment_id, bank, type, number_of_months, 
  pay_sum_per_month, broker_id, iin
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, payment_id, bank, type, number_of_months, pay_sum_per_month, broker_id, iin, created_at, updated_at
`

type CreateCreditDataParams struct {
	PaymentID      uuid.UUID      `json:"payment_id"`
	Bank           string         `json:"bank"`
	Type           string         `json:"type"`
	NumberOfMonths int16          `json:"number_of_months"`
	PaySumPerMonth string         `json:"pay_sum_per_month"`
	BrokerID       sql.NullInt32  `json:"broker_id"`
	Iin            sql.NullString `json:"iin"`
}

func (q *Queries) CreateCreditData(ctx context.Context, arg CreateCreditDataParams) (CreditDatum, error) {
	row := q.db.QueryRowContext(ctx, createCreditData,
		arg.PaymentID,
		arg.Bank,
		arg.Type,
		arg.NumberOfMonths,
		arg.PaySumPerMonth,
		arg.BrokerID,
		arg.Iin,
	)
	var i CreditDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Bank,
		&i.Type,
		&i.NumberOfMonths,
		&i.PaySumPerMonth,
		&i.BrokerID,
		&i.Iin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCreditData = `-- name: GetCreditData :one
SELECT id, payment_id, bank, type, number_of_months, pay_sum_per_month, broker_id, iin, created_at, updated_at FROM credit_data
WHERE payment_id = $1 LIMIT 1
`

func (q *Queries) GetCreditData(ctx context.Context, paymentID uuid.UUID) (CreditDatum, error) {
	row := q.db.QueryRowContext(ctx, getCreditData, paymentID)
	var i CreditDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Bank,
		&i.Type,
		&i.NumberOfMonths,
		&i.PaySumPerMonth,
		&i.BrokerID,
		&i.Iin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCreditData = `-- name: UpdateCreditData :one
UPDATE credit_data
SET 
  pay_sum_per_month = $2,
  number_of_months = $3
WHERE payment_id = $1
RETURNING id, payment_id, bank, type, number_of_months, pay_sum_per_month, broker_id, iin, created_at, updated_at
`

type UpdateCreditDataParams struct {
	PaymentID      uuid.UUID `json:"payment_id"`
	PaySumPerMonth string    `json:"pay_sum_per_month"`
	NumberOfMonths int16     `json:"number_of_months"`
}

func (q *Queries) UpdateCreditData(ctx context.Context, arg UpdateCreditDataParams) (CreditDatum, error) {
	row := q.db.QueryRowContext(ctx, updateCreditData, arg.PaymentID, arg.PaySumPerMonth, arg.NumberOfMonths)
	var i CreditDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Bank,
		&i.Type,
		&i.NumberOfMonths,
		&i.PaySumPerMonth,
		&i.BrokerID,
		&i.Iin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
