// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: credit_payment_data.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCardPaymentData = `-- name: CreateCardPaymentData :one
INSERT INTO card_payment_data (
  payment_id, provider, transaction_id
) VALUES (
  $1, $2, $3
)
RETURNING id, payment_id, provider, transaction_id, created_at, updated_at
`

type CreateCardPaymentDataParams struct {
	PaymentID     uuid.UUID `json:"payment_id"`
	Provider      string    `json:"provider"`
	TransactionID string    `json:"transaction_id"`
}

func (q *Queries) CreateCardPaymentData(ctx context.Context, arg CreateCardPaymentDataParams) (CardPaymentDatum, error) {
	row := q.db.QueryRowContext(ctx, createCardPaymentData, arg.PaymentID, arg.Provider, arg.TransactionID)
	var i CardPaymentDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Provider,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCardPaymentData = `-- name: GetCardPaymentData :one
SELECT id, payment_id, provider, transaction_id, created_at, updated_at FROM card_payment_data
WHERE payment_id = $1 LIMIT 1
`

func (q *Queries) GetCardPaymentData(ctx context.Context, paymentID uuid.UUID) (CardPaymentDatum, error) {
	row := q.db.QueryRowContext(ctx, getCardPaymentData, paymentID)
	var i CardPaymentDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Provider,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCardPaymentData = `-- name: UpdateCardPaymentData :one
UPDATE card_payment_data
SET 
  transaction_id = $2
WHERE payment_id = $1
RETURNING id, payment_id, provider, transaction_id, created_at, updated_at
`

type UpdateCardPaymentDataParams struct {
	PaymentID     uuid.UUID `json:"payment_id"`
	TransactionID string    `json:"transaction_id"`
}

func (q *Queries) UpdateCardPaymentData(ctx context.Context, arg UpdateCardPaymentDataParams) (CardPaymentDatum, error) {
	row := q.db.QueryRowContext(ctx, updateCardPaymentData, arg.PaymentID, arg.TransactionID)
	var i CardPaymentDatum
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Provider,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
