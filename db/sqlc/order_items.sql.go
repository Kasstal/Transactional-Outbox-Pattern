// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_items.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const calculateOrderTotal = `-- name: CalculateOrderTotal :one
SELECT SUM(price) as total FROM order_items 
WHERE order_id = $1
`

func (q *Queries) CalculateOrderTotal(ctx context.Context, orderID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, calculateOrderTotal, orderID)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  product_id, external_id, status, base_price, price,
  earned_bonuses, spent_bonuses, gift, owner_id,
  delivery_id, shop_assistant, warehouse, order_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, product_id, external_id, status, base_price, price, earned_bonuses, spent_bonuses, gift, owner_id, delivery_id, shop_assistant, warehouse, order_id, created_at, updated_at
`

type CreateOrderItemParams struct {
	ProductID     string         `json:"product_id"`
	ExternalID    sql.NullString `json:"external_id"`
	Status        string         `json:"status"`
	BasePrice     string         `json:"base_price"`
	Price         string         `json:"price"`
	EarnedBonuses sql.NullString `json:"earned_bonuses"`
	SpentBonuses  sql.NullString `json:"spent_bonuses"`
	Gift          sql.NullBool   `json:"gift"`
	OwnerID       sql.NullString `json:"owner_id"`
	DeliveryID    sql.NullString `json:"delivery_id"`
	ShopAssistant sql.NullString `json:"shop_assistant"`
	Warehouse     sql.NullString `json:"warehouse"`
	OrderID       uuid.UUID      `json:"order_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ProductID,
		arg.ExternalID,
		arg.Status,
		arg.BasePrice,
		arg.Price,
		arg.EarnedBonuses,
		arg.SpentBonuses,
		arg.Gift,
		arg.OwnerID,
		arg.DeliveryID,
		arg.ShopAssistant,
		arg.Warehouse,
		arg.OrderID,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ExternalID,
		&i.Status,
		&i.BasePrice,
		&i.Price,
		&i.EarnedBonuses,
		&i.SpentBonuses,
		&i.Gift,
		&i.OwnerID,
		&i.DeliveryID,
		&i.ShopAssistant,
		&i.Warehouse,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, product_id, external_id, status, base_price, price, earned_bonuses, spent_bonuses, gift, owner_id, delivery_id, shop_assistant, warehouse, order_id, created_at, updated_at FROM order_items WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, id uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ExternalID,
		&i.Status,
		&i.BasePrice,
		&i.Price,
		&i.EarnedBonuses,
		&i.SpentBonuses,
		&i.Gift,
		&i.OwnerID,
		&i.DeliveryID,
		&i.ShopAssistant,
		&i.Warehouse,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, product_id, external_id, status, base_price, price, earned_bonuses, spent_bonuses, gift, owner_id, delivery_id, shop_assistant, warehouse, order_id, created_at, updated_at FROM order_items 
WHERE order_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ExternalID,
			&i.Status,
			&i.BasePrice,
			&i.Price,
			&i.EarnedBonuses,
			&i.SpentBonuses,
			&i.Gift,
			&i.OwnerID,
			&i.DeliveryID,
			&i.ShopAssistant,
			&i.Warehouse,
			&i.OrderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItemStatus = `-- name: UpdateOrderItemStatus :one
UPDATE order_items
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, product_id, external_id, status, base_price, price, earned_bonuses, spent_bonuses, gift, owner_id, delivery_id, shop_assistant, warehouse, order_id, created_at, updated_at
`

type UpdateOrderItemStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateOrderItemStatus(ctx context.Context, arg UpdateOrderItemStatusParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemStatus, arg.ID, arg.Status)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ExternalID,
		&i.Status,
		&i.BasePrice,
		&i.Price,
		&i.EarnedBonuses,
		&i.SpentBonuses,
		&i.Gift,
		&i.OwnerID,
		&i.DeliveryID,
		&i.ShopAssistant,
		&i.Warehouse,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
