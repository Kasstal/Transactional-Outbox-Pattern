// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: history.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO history (
  type, type_id, old_value, value, user_id, order_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, type, type_id, old_value, value, date, user_id, order_id, created_at, updated_at
`

type CreateHistoryParams struct {
	Type     string    `json:"type"`
	TypeID   int32     `json:"type_id"`
	OldValue []byte    `json:"old_value"`
	Value    []byte    `json:"value"`
	UserID   string    `json:"user_id"`
	OrderID  uuid.UUID `json:"order_id"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRowContext(ctx, createHistory,
		arg.Type,
		arg.TypeID,
		arg.OldValue,
		arg.Value,
		arg.UserID,
		arg.OrderID,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TypeID,
		&i.OldValue,
		&i.Value,
		&i.Date,
		&i.UserID,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM history WHERE id = $1
`

func (q *Queries) DeleteHistory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteHistory, id)
	return err
}

const getHistory = `-- name: GetHistory :one
SELECT id, type, type_id, old_value, value, date, user_id, order_id, created_at, updated_at FROM history WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHistory(ctx context.Context, id int32) (History, error) {
	row := q.db.QueryRowContext(ctx, getHistory, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TypeID,
		&i.OldValue,
		&i.Value,
		&i.Date,
		&i.UserID,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHistoryByOrder = `-- name: ListHistoryByOrder :many
SELECT id, type, type_id, old_value, value, date, user_id, order_id, created_at, updated_at FROM history 
WHERE order_id = $1 
ORDER BY date DESC
LIMIT $2 OFFSET $3
`

type ListHistoryByOrderParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) ListHistoryByOrder(ctx context.Context, arg ListHistoryByOrderParams) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, listHistoryByOrder, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []History{}
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.TypeID,
			&i.OldValue,
			&i.Value,
			&i.Date,
			&i.UserID,
			&i.OrderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
