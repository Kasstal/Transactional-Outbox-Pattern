// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: history.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO history (
    type, type_id, old_value, value, user_id, order_id
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, type, type_id, old_value, value, date, user_id, order_id
`

type CreateHistoryParams struct {
	Type     string          `json:"type"`
	TypeID   int32           `json:"type_id"`
	OldValue json.RawMessage `json:"old_value"`
	Value    json.RawMessage `json:"value"`
	UserID   string          `json:"user_id"`
	OrderID  pgtype.UUID     `json:"order_id"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.Type,
		arg.TypeID,
		arg.OldValue,
		arg.Value,
		arg.UserID,
		arg.OrderID,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TypeID,
		&i.OldValue,
		&i.Value,
		&i.Date,
		&i.UserID,
		&i.OrderID,
	)
	return i, err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM history WHERE id = $1
`

func (q *Queries) DeleteHistory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteHistory, id)
	return err
}

const getHistoriesByOrderID = `-- name: GetHistoriesByOrderID :many
SELECT id, type, type_id, old_value, value, date, user_id, order_id FROM history WHERE order_id = $1
`

func (q *Queries) GetHistoriesByOrderID(ctx context.Context, orderID pgtype.UUID) ([]History, error) {
	rows, err := q.db.Query(ctx, getHistoriesByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.TypeID,
			&i.OldValue,
			&i.Value,
			&i.Date,
			&i.UserID,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistory = `-- name: GetHistory :one
SELECT id, type, type_id, old_value, value, date, user_id, order_id FROM history WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHistory(ctx context.Context, id int32) (History, error) {
	row := q.db.QueryRow(ctx, getHistory, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TypeID,
		&i.OldValue,
		&i.Value,
		&i.Date,
		&i.UserID,
		&i.OrderID,
	)
	return i, err
}

const updateHistory = `-- name: UpdateHistory :one
UPDATE history
SET
    type = $2,
    type_id = $3,
    old_value = $4,
    value = $5,
    user_id = $6,
    date = now()
WHERE id = $1
    RETURNING id, type, type_id, old_value, value, date, user_id, order_id
`

type UpdateHistoryParams struct {
	ID       int32           `json:"id"`
	Type     string          `json:"type"`
	TypeID   int32           `json:"type_id"`
	OldValue json.RawMessage `json:"old_value"`
	Value    json.RawMessage `json:"value"`
	UserID   string          `json:"user_id"`
}

func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, updateHistory,
		arg.ID,
		arg.Type,
		arg.TypeID,
		arg.OldValue,
		arg.Value,
		arg.UserID,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TypeID,
		&i.OldValue,
		&i.Value,
		&i.Date,
		&i.UserID,
		&i.OrderID,
	)
	return i, err
}
